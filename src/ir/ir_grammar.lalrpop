use std::str::FromStr;
use crate::ir::ast::{*};

grammar;

// ----------------------------------------------------------------------------
// Expression
// ----------------------------------------------------------------------------
pub Expr: Expr = {
//    #[precedence(level="0")]
//    Term,
//    <name:Identifier> "(" <args:Comma<Arg>> ")" => Box::new(Expr::new(ExprValue::Apply(name, args))),
    
    
    #[precedence(level="0")]
    Term,

    // #[precedence(level="1")] #[assoc(side="left")]
    // <l:Expr> "." <r:Expr> => binop(&l, &BinOp::Dot, &r),

    // #[precedence(level="2")] #[assoc(side="left")]
    // "-" <e:Expr> => unop(UnOp::Neg, e),
    // "+" <e:Expr> => unop(UnOp::Pos, e),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expr> "*" <r:Expr> => binop(&l, &BinOp::Mul, &r),
    <l:Expr> "/" <r:Expr> => binop(&l, &BinOp::Div, &r),
    <l:Expr> "%" <r:Expr> => binop(&l, &BinOp::Mod, &r),

    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expr> "+" <r:Expr> => binop(&l, &BinOp::Add, &r),
    <l:Expr> "-" <r:Expr> => binop(&l, &BinOp::Sub, &r),

    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expr> "==" <r:Expr> => binop(&l, &BinOp::Eq, &r),
    <l:Expr> "!=" <r:Expr> => binop(&l, &BinOp::Ne, &r),
    <l:Expr> "<" <r:Expr> => binop(&l, &BinOp::Lt, &r),
    <l:Expr> "<=" <r:Expr> => binop(&l, &BinOp::Le, &r),
    <l:Expr> ">" <r:Expr> => binop(&l, &BinOp::Gt, &r),
    <l:Expr> ">=" <r:Expr> => binop(&l, &BinOp::Ge, &r),

    #[precedence(level="6")] #[assoc(side="left")]
    "not" <e:Expr> => unop(&UnOp::Not, &e),

    #[precedence(level="7")] #[assoc(side="left")]
    <l:Expr> "and" <r:Expr> => binop(&l, &BinOp::And, &r),
    <l:Expr> "or" <r:Expr> => binop(&l, &BinOp::Or, &r),

}

Term: Expr = { 
    Int => Expr::Int(<>), 
    Float => Expr::Float(<>),
    // Identifier => Expr::Identifier(<>),
    // StringLiteral => Expr::StringLiteral(<>),
    "(" <Expr> ")",
    Boolean => Expr::Boolean(<>)
};


// ----------------------------------------------------------------------------
// Terminals
// ----------------------------------------------------------------------------
Int: i64 = <s:r"-?[0-9]+"> => i64::from_str(s).unwrap();

Boolean: bool = {
	"true" => true,
	"false" => false
};

StringLiteral: String = <s:r#""[^"]*""#> => s[1..s.len()-1].to_string();

Float: f64 = <f:r"-?[0-9]+(\.[0-9]*)+"> => f64::from_str(f).unwrap();

Identifier: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_string();


// ----------------------------------------------------------------------------
// Util
// ----------------------------------------------------------------------------
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

