use std::str::FromStr;
use crate::parser::ast::{*};
use lalrpop_util::ParseError;

grammar;

// ----------------------------------------------------------------------------
// Expression
// ----------------------------------------------------------------------------

pub Expr: Expr = {
//    #[precedence(level="0")]
//    Term,
//    <name:Identifier> "(" <args:Comma<Arg>> ")" => Box::new(Expr::new(ExprValue::Apply(name, args))),
    
    
    #[precedence(level="0")]
    Term,

    // #[precedence(level="1")] #[assoc(side="left")]
    // <l:Expr> "." <r:Expr> => binop(&l, &BinOp::Dot, &r),

    // #[precedence(level="2")] #[assoc(side="left")]
    // "-" <e:Expr> => unop(UnOp::Neg, e),
    // "+" <e:Expr> => unop(UnOp::Pos, e),

    #[precedence(level="3")] #[assoc(side="left")]
    <start:@L> <l:Expr> "*" <r:Expr> <end:@R> => binop(&l, &BinOp::Mul, &r, start, end),
    <start:@L> <l:Expr> "/" <r:Expr> <end:@R> => binop(&l, &BinOp::Div, &r, start, end),
    <start:@L> <l:Expr> "%" <r:Expr> <end:@R> => binop(&l, &BinOp::Mod, &r, start, end),

    #[precedence(level="4")] #[assoc(side="left")]
    <start:@L> <l:Expr> "+" <r:Expr> <end:@R> => binop(&l, &BinOp::Add, &r, start, end),
    <start:@L> <l:Expr> "-" <r:Expr> <end:@R> => binop(&l, &BinOp::Sub, &r, start, end),

    #[precedence(level="5")] #[assoc(side="left")]
    <start:@L> <l:Expr> "==" <r:Expr> <end:@R> => binop(&l, &BinOp::Eq, &r, start, end),
    <start:@L> <l:Expr> "!=" <r:Expr> <end:@R> => binop(&l, &BinOp::Ne, &r, start, end),
    <start:@L> <l:Expr> "<" <r:Expr> <end:@R> => binop(&l, &BinOp::Lt, &r, start, end),
    <start:@L> <l:Expr> "<=" <r:Expr> <end:@R> => binop(&l, &BinOp::Le, &r, start, end),
    <start:@L> <l:Expr> ">" <r:Expr> <end:@R> => binop(&l, &BinOp::Gt, &r, start, end),
    <start:@L> <l:Expr> ">=" <r:Expr> <end:@R> => binop(&l, &BinOp::Ge, &r, start, end),

    #[precedence(level="6")] #[assoc(side="left")]
    <start:@L> "not" <e:Expr> <end:@R> => unop(&UnOp::Not, &e, start, end),

    #[precedence(level="7")] #[assoc(side="left")]
    <start:@L> <l:Expr> "and" <r:Expr> <end:@R> => binop(&l, &BinOp::And, &r, start, end),
    <start:@L> <l:Expr> "or" <r:Expr> <end:@R> => binop(&l, &BinOp::Or, &r, start, end),

}

Term: Expr = { 
    <start:@L> <v:Int> <end:@R> => expr(Some(Type::Int), ExprValue::Int(v), start, end), 
    <start:@L> <v:Float> <end:@R> => expr(Some(Type::Float), ExprValue::Float(v), start, end),
    // Identifier => Expr::Identifier(<>),
    // StringLiteral => Expr::StringLiteral(<>),
    "(" <Expr> ")",
    <start:@L> <v:Boolean> <end:@R> => expr(Some(Type::Boolean), ExprValue::Boolean(v), start, end)
};

// ----------------------------------------------------------------------------
// Block
// ----------------------------------------------------------------------------

Block: Block = {
    <start:@L> "{" <statements:Statement*> "}" <end:@R> => 
    	block(statements, start, end)
};

Statement: Statement = {
    <start:@L> <e:Expr> ";" <end:@R> => Statement {
    	type_: e.type_.clone(),
	loc: Loc { start, end },
	value: StatementValue::Expr(e)
    },
    <start:@L> "return" <e:Expr> ";" <end:@R> => Statement {
	type_: e.type_.clone(),
	loc: Loc { start, end },
	value: StatementValue::Return(e)
    }
};

// ----------------------------------------------------------------------------
// Type
// ----------------------------------------------------------------------------

Type: Type = <t:Identifier> =>? match t.as_str() {
	"Int"=> Ok(Type::Int),
	"Float"=> Ok(Type::Float),
	"Boolean"=> Ok(Type::Boolean),
	_ => Err(ParseError::User { error: "type not suported" })
};


// ----------------------------------------------------------------------------
// Function 
// ----------------------------------------------------------------------------

TypedIdent: Ident = <start:@L> <name:Identifier> ":" <t:Type> <end:@R> => 
    Ident { name, type_: Some(t), loc: Loc { start, end } };

Function: Function = 
    <start:@L> "(" <args:Comma<TypedIdent>> ")" ":" <return_type:Type> "=>" <body:Block> <end:@R> => 
    	Function { name: None, args, return_type, body, loc: Loc { start, end } };

// ----------------------------------------------------------------------------
// Module 
// ----------------------------------------------------------------------------

ModuleStatement: ModuleStatement = {
    <start:@L> <name:Identifier> "=" <f:Function> <end:@R> => 
    	ModuleStatement {
		value: ModuleStatementValue::Function(set_fun_name(name, f)),
		loc: Loc {start, end}
	}
}

// ----------------------------------------------------------------------------
// Terminals
// ----------------------------------------------------------------------------
Int: i64 = <s:r"-?[0-9]+"> => i64::from_str(s).unwrap();

Boolean: bool = {
	"True" => true,
	"False" => false
};

StringLiteral: String = <s:r#""[^"]*""#> => s[1..s.len()-1].to_string();

Float: f64 = <f:r"-?[0-9]+(\.[0-9]*)+"> => f64::from_str(f).unwrap();

Identifier: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_string();


// ----------------------------------------------------------------------------
// Util
// ----------------------------------------------------------------------------
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

