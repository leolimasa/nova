use std::str::FromStr;
use crate::ast::{*};

grammar;

// ----------------------------------------------------------------------------
// Expression
// ----------------------------------------------------------------------------
pub Expr: Box<Expr> = {
    #[precedence(level="0")]
    Term,
    <name:Identifier> "(" <args:Comma<Arg>> ")" => Box::new(Expr::new(ExprValue::Apply(name, args))),

    #[precedence(level="1")] #[assoc(side="left")]
    <l:Expr> "." <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Dot, r))),

    #[precedence(level="2")] #[assoc(side="left")]
    "-" <e:Expr> => Box::new(Expr::new(ExprValue::UnOp(UnOp::Neg, e))),
    "+" <e:Expr> => Box::new(Expr::new(ExprValue::UnOp(UnOp::Pos, e))),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expr> "*" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Mul, r))),
    <l:Expr> "/" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Div, r))),
    <l:Expr> "%" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Mod, r))),

    #[precedence(level="4")] #[assoc(side="left")]
    <l:Expr> "+" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Add, r))),
    <l:Expr> "-" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Sub, r))),

    #[precedence(level="5")] #[assoc(side="left")]
    <l:Expr> "==" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Eq, r))),
    <l:Expr> "!=" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Ne, r))),
    <l:Expr> "<" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Lt, r))),
    <l:Expr> "<=" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Le, r))),
    <l:Expr> ">" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Gt, r))),
    <l:Expr> ">=" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Ge, r))),

    #[precedence(level="6")] #[assoc(side="left")]
    "not" <e:Expr> => Box::new(Expr::new(ExprValue::UnOp(UnOp::Not, e))),

    #[precedence(level="7")] #[assoc(side="left")]
    <l:Expr> "and" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::And, r))),
    <l:Expr> "or" <r:Expr> => Box::new(Expr::new(ExprValue::BinOp(l, BinOp::Or, r))),

}


Term: Box<Expr> = { 
    Num => Box::new(Expr::new(ExprValue::Number(<>))), 
    Identifier => Box::new(Expr::new(ExprValue::Identifier(<>))),
    StringLiteral => Box::new(Expr::new(ExprValue::StringLiteral(<>))),
    "(" <Expr> ")",
};

Arg: Arg = {
    FunDefInline => Arg::new(ArgValue::FunDef(<>)),
    FunDefBlock => Arg::new(ArgValue::FunDef(<>)),
    Expr => Arg::new(ArgValue::Expr(<>)),
}; 

// ----------------------------------------------------------------------------
// Function Definition
// ----------------------------------------------------------------------------

pub FunDefInline: FunDef = {
    "fn" "(" <args:Comma<FunArg>> ")" <body:Expr> =>
    	FunDef { 
            args, 
            body: Block::single_statement(Statement::Expr(body)), 
            name: None },
};

pub FunDefBlock: FunDef = {
    "fn" "(" <args:Comma<FunArg>> ")" <block:Block> =>
    	FunDef { 
            args, 
            body: block, 
            name: None },
};

FunArg: FunArg = {
    Identifier => FunArg::new(<>),
};



// ----------------------------------------------------------------------------
// Block
// ----------------------------------------------------------------------------

Assignment: Assignment = {
    <identifier:Identifier> "=" <expr:Expr> ";" => Assignment::new(identifier, AssignmentValue::Expr(expr)),
    <identifier:Identifier> "=" <fundef:FunDefInline> ";" => Assignment::new(identifier, AssignmentValue::FunDef(fundef)),
    <identifier:Identifier> "=" <fundef:FunDefBlock> => Assignment::new(identifier, AssignmentValue::FunDef(fundef)),
};

Block: Block = {
    "{" <statements:Statement*> "}" => Block::new(<>),
};

Statement: Statement = {
    <Expr> ";" => Statement::Expr(<>),
    <Assignment> => Statement::Assignment(<>),
};


// ----------------------------------------------------------------------------
// Terminals
// ----------------------------------------------------------------------------
Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

Identifier: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_string();

StringLiteral: String = <s:r#""[^"]*""#> => s[1..s.len()-1].to_string();


// ----------------------------------------------------------------------------
// Util
// ----------------------------------------------------------------------------
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

