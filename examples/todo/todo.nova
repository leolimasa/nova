import file 
    ./linked_list list
    ./optional opt

import std 
    convert
    functional { try }

Item = type { label: String, checked: Bool }

toggle_item = (items, idx) =>
    # This gets desugared to
    # items = ops.access_assign(items, idx, { ..items[idx], complete: [expr]})
    items[idx].complete = not items[idx].complete

add_item = (items) =>
    print("Item label: ")
    label = read()
    items + { label, complete: False }
 
select_item = (items) =>
    print("Select item #: ")
    num = read() | convert.to_int
    if num == Error(e) then
        print("Must be a number")
	return None
    num

delete_item = (items) =>
    i = select_item(items) | try
    list.delete(items, num) 

rename_item = (items) => 
    i = select_item(items) | try
    print("New label: ")
    label = read()
    items[i].label = label

list_items = (items) => map(items, (item, i) => print(i + ") " + item.label))

action = (items) =>
    list_items(items)
    print("""
    	Select action:
    	1) Add item
	2) Delete item
	3) Toggle item
	4) Rename item
    """)
    action = read("Action: ") | convert.to_int
    if action == Error(e) then
        print("Invalid action.")
	return action(items)

    when action
        is 1 => add_item(items)
	is 2 => delete_item(items)
	is 3 => toggle_item(items)
	is 4 => rename_item(items)
    
main = () =>
    action(None)
    
